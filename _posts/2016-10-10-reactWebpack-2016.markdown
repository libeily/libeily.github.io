---
layout:     post
header-img: "img/post-bg-universe.jpg"
title:      "webpack"
subtitle:   "react+webpack+ES6简易环境"
date:       2016-10-09 21:00:00
author:     "Libei"
tags:
    - webpack 
    - react
---
  > “Webpack react”  

## 起步  

该环境所有代码于 [https://github.com/libeily/webpack-react-init.git](https://github.com/libeily/webpack-react-init.git)。首先需要装node以及npm，以及根目录app;其次，webpack 是什么？  

> MODULE BUNDLER  

它是这么自称的，模块打包器。  在 webpack 里，所有类型的文件都可以是模块，包括我们最常见的 JavaScript，及 CSS 文件、图片、json 文件等等。通过 webpack 的各种加载器，我们可以更高效地管理这些文件。

 优点以及适用场景 
* 支持 ES6、JSX、LESS 等格式的源文件编译成浏览器识别的格式；
 * 支持静态文件压缩； * 支持静态文件名 hash 化，支持 hash 后的文件名及路径注入到后端模版文件中；
 * 此特性可以发布所有静态文件到一个统一的目录，由 nginx 直接接入，消除静态文件的版本概念，使得静态资源的上线更加方便、安全，无需回滚。  
* 支持发布到任意路径或网址下，发布后的网址自动注入到后端模版文件中；
 * 支持静态文件自动合并，能够很好的处理公共库和组件文件的合并； * 多页面应用更好的复用公共组件，利用 HTTP 协议缓存机制。  * 先进的依赖处理机制； 
* 兼容后端模版引擎，不冲突；   
    * 对开发友好，方便调试；   支持环境变量，区分开发环境和生产环境； 
    * 方便调试和开发，可见即可得； 
    * 强大方便的 SourceMap 支持，可以直接对源代码进行调试；  

## 安装  

建议在项目下安装一份局域的 webpack：
 {% highlight css %} 
npm install webpack --save-dev
 {% endhighlight %}  
如果 npm安装速度较慢，可以将配置项的镜像来源设置为淘宝 ［淘宝镜像](https://npm.taobao.org/)  

## 初始化项目 

创建一个 package.json 文件，用于保存项目版本、依赖关系等
 {% highlight css %}    
npm init -y
 {% endhighlight %}
 在这个生成过程中，根据项目信息描述填写相应信息即可，这时，
我们的app项目目录下有以下内容：
 * package.json 文件 
* node_modules 文件夹  
* index.html
* app
    * main.js 手动创建空文件
    * app.js 手动创建空文件

## webpack 配置 

首先，在项目根目录新建一个 webpack.config.js，这是 webpack 默认的配置文件名称，然后在里面可以描述一下让 webpack 做的一些事情 .添加以下内容：
 {% highlight css %}
 var path = require('path');
module.exports = {
  entry: path.resolve(__dirname, 'app/main.js'),//main.js作为入口，若项目中没有main.js需要创建
  output: {
    path: path.resolve(__dirname, 'build'), // 输出文件的保存路径(注意不要有空格)
    filename: 'bundle.js',// 输出文件的名称（webpack自动生成）
  },
};
{% endhighlight %}

* entry: 入口,定义要打包的文件
* output: 出口，定义打包输出的文件；包括路径，文件名，还可能有运行时的访问路径（publicPath）参数
* module: webpack将所有的资源都看做是模块，而模块就需要加载器；主要定义一些loaders,定义哪些后缀名的文件应该用哪些loader
* test: 检测哪些文件需要此loader，是一个正则表达式
* exclude: 忽略哪些文件
* resolve: 定义能够被打包的文件，文件后缀名
* plugins: 定义一些额外的插件


## Loader

Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。Loader 可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。这样，我们就可以通过 require 来加载任何类型的模块或文件，比如 CoffeeScript、 JSX、 LESS 或图片。

常用到的 Loaders
* 处理样式：sass-loader、style-loader、css-loader，将 sass 转成 css
* 图片处理，url-loader、file-loader、image-webpack-loader， 将图片转换成base64 或者 进行压缩
* js处理： babel-loader，babel-preset-es2015，babel-preset-react，将es6或更高级的代码转成es5的代码
示例用到的 Plugins
* 代码热替换：HotModuleReplacementPlugin
* 生成html文件：HtmlWebpackPlugin
* 报错但不退出webpack进程：NoErrorsPlugin
* 代码压缩：UglifyJsPlugin
* 自动打开浏览器： OpenBrowserPlugin
* 设置环境变量： DefinePlugin

## 简单例
现在我们有了一个最简单的配置，我们需要有什么东西去编译，让我们开始一个经典的 Hello World，设置 /app 像这样：
app/app.js
 {% highlight js %}
import React, { Component } from 'react';

export default class App extends Component {
  render() {
    return (
    <h1>Hello, world.</h1>

  );
  }
}
{% endhighlight %}
app/main.js
 {% highlight js %}
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(<App />, document.getElementById('root'));
{% endhighlight %}

现在在你的命令行运行 webpack，然后你的应用会开始编译，一个 bundle.js 文件就这样出现在你的 /build 文件夹下，需要在 build/ 下的 index.html 去启动项目。
build/index.html
 {% highlight html %}
<!doctype html>
<html>
<head>
    <title>Sample App</title>
</head>
<body>
<div id='root'>
</div>
<script src="/static/bundle.js"></script>
</body>
</html>
{% endhighlight %}
这是在浏览器中打开index.html就可以看到页面
## 设置package.json 运行命令
npm 是一个非常好用的用来编译的指令，通过 npm 你可以不用去担心项目中使用了什么技术，你只要调用这个指令就可以了，只要你在 package.json 中设置 scripts 的值就可以了。
把下面的内容添加到 package.json中
 {% highlight js %}
"scripts": {
   "build": "webpack"
 }
 {% endhighlight %}
npm run build 就可以实现webpack的功能，当项目越发复杂的时候，这样的方法会变得越来越有效。你可以把所有复杂的操作隐藏在 scripts 里面来保证界面的简洁。

如果需要一直输入 npm run build 确实是一件非常无聊的事情，幸运的是，我们可以把让他安静的运行，让我们设置 webpack-dev-server。

## 设置 webpack-dev-server
* 输入 npm i webpack-dev-server --save，此外，我们需要去调整 package.json scripts 部分去包含这个指令，下面是基本的设置
package.json
 {% highlight js %}
{
  "scripts": {
    "build": "webpack",
    "dev": "webpack-dev-server --devtool eval --progress --colors --hot --content-base build"
  }
}
 {% endhighlight %}
当你在命令行里运行 npm run dev 的时候他会执行 dev 属性里的值。这是这些指令的意思：
* webpack-dev-server - 在 localhost:8080 建立一个 Web 服务器
* --devtool eval - 为你的代码创建源地址。当有任何报错的时候可以让你更加精确地定位到文件和行号
* --progress - 显示合并代码进度
* --colors - Yay，命令行中显示颜色！
* --content-base build - 指向设置的输出目录

访问 http://localhost:8080 你会看到效果。

## 设置 浏览器自动刷新

当运行 webpack-dev-server 的时候，它会监听你的文件修改。当项目重新合并之后，会通知浏览器刷新。为了能够触发这样的行为，需要把你的 index.html 放到 build/ 文件夹下，
我们需要增加一个脚本当发生改动的时候去自动刷新应用，你需要在配置中增加一个入口点。
webpack.config.js
{% highlight js %}
var path = require('path');

module.exports = {
    entry: [
      'webpack/hot/dev-server',
      'webpack-dev-server/client?http://localhost:8080',
      path.resolve(__dirname, 'app/main.js')
    ],
    output: {
        path: path.resolve(__dirname, 'build'),
        filename: 'bundle.js',
    },
};
{% endhighlight %}
## 安装 React JS
npm install react --save
为了能够使用 JSX 语法，你需要用 Webpack 来转码你的 JavaScript，这是加载器的工作，我们可以使用一个很好用也有很多功能的 Babel。
(webstrom 可以在perference的language下javascript设置jsx harmony，即可消失标红现象)

为了能够使用 JSX 语法，你需要用 Webpack 来转码你的 JavaScript，这是加载器的工作，我们可以使用一个很好用也有很多功能的 Babel。

npm install babel-loader --save-dev ,注意要使用 ^1.3.0 版本
根目录创建 .babelrc
添加
{% highlight js %}
{
  "presets": ["es2015", "stage-0", "react"]
}
{% endhighlight %}
现在我们需要去配置 Webpack 来使用加载器。
{% highlight js %}
webpack.config.js
var path = require('path');
module.exports = {
    entry: [
        'webpack/hot/dev-server',
        path.resolve(__dirname, './app/main.js')
    ],
    output: {
        path: path.resolve(__dirname, './build'),
        filename: 'bundle.js'
    },
    module:{
        loaders:[{ß
            test: /.js?$/,
            exclude: /(node_modules)/,
            loader: 'babel'
        }]
    }
}
{% endhighlight %}

## 加载css／less/sass
加载 CSS 需要 css-loader 和 style-loader，他们做两件不同的事情，css-loader会遍历 CSS 文件，然后找到 url() 表达式然后处理他们，style-loader 会把原来的 CSS 代码插入页面中的一个 style 标签中。
npm install less-loader 或者 npm install sass-loader.
{% highlight js %}
webpack.config.js

var path = require('path');
var config = {
  entry: path.resolve(__dirname, 'app/main.js')
  output: {
    path: path.resolve(__ dirname, 'build'),
    filename: 'bundle.js'
  },
  module: {
    loaders: [{
      test: /\.jsx$/,
      loader: 'babel'
    },

    // LESS
    {
      test: /\.less$/,
      loader: 'style!css!less'
    },

    // SASS
    {
      test: /\.scss$/,
      loader: 'style!css!sass'
    }]
  },{
     test: /\.(png|jpg)$/,
    loader: 'url?limit=25000'
}
};
{% endhighlight %}
## 处理图片

如果你在你的 CSS 中加载了太多图片的话，可以自动把这些图片转成 BASE64 字符串然后内联到 CSS 里来降低必要的请求数，
npm install url-loader --save-dev
来安装加载器，它会把需要转换的路径变成 BASE64 字符串，在其他的 Webpack 书中提到的这方面会把你 CSS 中的 “url()” 像其他 require 或者 import 来处理。意味着如果我们可以通过它来处理我们的图片文件。
url-loader 传入的 limit 参数是告诉它图片如果不大于 25KB 的话要自动在它从属的 css 文件中转成 BASE64 字符串。

## 字体
{% highlight js %}
{
  test   : /\.(woff|woff2|ttf|eot|svg)/,
  loaders: ['url?limit=3000&name=font/[hash:8].[name].[ext]']
}
{% endhighlight %}

## 热加载

 使用 React JS 和 react-hot-loader 可以让你去改变组件中的 class 代码，然后可以在 DOM 上看到实时更新了实例，没有修改他们的状态！看起来就像 CSS 更新一样，不过是换成了组件,此时webpack.config.js如下
{% highlight js %}
/**
 * Created by liyan on 16/10/12.
 */
var path = require('path');
var webpack = require('webpack')
module.exports = {
  entry: [
    'webpack/hot/dev-server',
    'webpack-dev-server/client?http://localhost:3000',
    path.resolve(__dirname, './app/main.js')
  ],
  output: {
    path: path.join(__dirname, 'dist'),
    filename: 'bundle.js',
    publicPath: '/static/'
  },
  devtool: 'eval-source-map',
  module:{
    loaders:[
      {
        test: /.js?$/,
        exclude: /(node_modules)/,
        loaders: ['react-hot', 'babel']
      },
      {
        test: /\.css$/, // Only .css files
        loader: 'style!css' // Run both loaders
      },{
        test: /\.less$/,
        loader: 'style!css!less'
      },

      // SASS
      {
        test: /\.scss$/,
        loader: 'style!css!sass'
      },
      {
        test: /\.(png|jpg)$/,
        loader: 'url?limit=25000'
      },
      {
        test   : /\.(woff|woff2|ttf|eot|svg)/,
        loaders: ['url?limit=3000&name=font/[hash:8].[name].[ext]']
      }
    ]
  },
  plugins: [
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoErrorsPlugin()
  ]

}
{% endhighlight %}
此外,还需要建立server.js以启动该项目,注意,采用次方法启动时,就不再需要 npm run dev了,直接启动server.js即可
{% highlight js %}
var webpack = require('webpack');
var WebpackDevServer = require('webpack-dev-server');
var config = require('./webpack.config');

new WebpackDevServer(webpack(config), {
  publicPath: config.output.publicPath,
  hot: true,
  historyApiFallback: true
}).listen(3000, 'localhost', function (err, result) {
  if (err) {
    return console.log(err);
  }

  console.log('Listening at http://localhost:3000/');
});
{% endhighlight %}

## 参考资料

* [http://zhaoda.net/webpack-handbook/loader.html](http://zhaoda.net/webpack-handbook/loader.html)
* [https://fakefish.github.io/react-webpack-cookbook/Running-a-workflow.html](https://fakefish.github.io/react-webpack-cookbook/Running-a-workflow.html)

  —— Libei 后记于 2016.10 
